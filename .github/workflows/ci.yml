name: CI
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      image_name:
        description: "Name of the image to build"
        required: true
        default: alpine-openstack
        type: string

jobs:
  build:
    name: Build image
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ github.event.inputs.image_name }}
    steps:
      - name: Set default image name
        if: env.IMAGE_NAME == null
        run: echo "IMAGE_NAME=alpine-openstack" >> $GITHUB_ENV
      - name: Install qemu-utils
        run: |
          sudo apt-get update
          sudo apt-get install qemu-utils genisoimage

      - uses: actions/checkout@v3

      - name: Build image
        run: |
          wget https://raw.githubusercontent.com/alpinelinux/alpine-make-vm-image/v0.8.0/alpine-make-vm-image \
            && echo 'ddf44e4132a32e762cd0ae46e12c0122c5c18877  alpine-make-vm-image' | sha1sum -c \
            || exit 1
          chmod +x ./alpine-make-vm-image
          sudo ./alpine-make-vm-image \
              --image-format qcow2 \
              --image-size 1G \
              --repositories-file openstack/repositories \
              --packages "$(cat openstack/packages)" \
              --script-chroot \
              alpine-openstack.qcow2 -- ./openstack/configure.sh
          sha256sum alpine-openstack.qcow2 > SHA256SUMS
          qemu-img convert alpine-openstack.qcow2 -O vhdx -o subformat=dynamic alpine-openstack.vhdx
          (cd nocloud; genisoimage  -output ../seed.iso -volid cidata -joliet -rock user-data meta-data; )
          sha256sum alpine-openstack.vhdx seed.iso >> SHA256SUMS
      - name: Upload QCOW2 root fs artifact
        uses: actions/upload-artifact@v3
        with:
          name: alpine-openstack.qcow2
          path: "${{ github.workspace }}/alpine-openstack.qcow2"
      - name: Upload VHDX root fs artifact
        uses: actions/upload-artifact@v3
        with:
          name: alpine-openstack.vhdx
          path: |
            alpine-openstack.vhdx
            seed.iso
      - name: Make Development release
        uses: "marvinpinto/action-automatic-releases@latest"
        if: ${{ github.ref == 'refs/heads/main' }}
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Development Build"
          files: |
            alpine-openstack.qcow2
            alpine-openstack.vhdx
            seed.iso
            SHA256SUMS
  test-image:
    name: Test produced image
    runs-on: ubuntu-latest
    env:
      TF_VAR_image_name: ${{ github.event.inputs.image_name }}
    needs: build
    steps:
      - name: Set default image name
        if: env.TF_VAR_image_name == null
        run: echo "TF_VAR_image_name=alpine-openstack" >> $GITHUB_ENV
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: alpine-openstack.qcow2
      - name: Apply plan
        id: apply_plan
        run: |
          cd terraform
          mkdir -p $HOME/.config/openstack
          echo -n "${{ secrets.cloud_config }}" | openssl base64 -d -A > $HOME/.config/openstack/clouds.yaml
          echo -e "${{ secrets.TERRAFORM_VARS }}" | openssl base64 -d -A > terraform.tfvars
          terraform init
          terraform apply -auto-approve
          echo "instance_ipv4=$(terraform output -raw instance_ipv4)" >> $GITHUB_OUTPUT
        env:
          OS_CLOUD: openstack
      - name: Test connectivity of the server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.apply_plan.outputs.instance_ipv4 }}
          username: root
          debug: true
          key: ${{ secrets.SSH_KEY }}
          script: |
            apk update && apk upgrade
      - name: Save working image
        run: |
          python -m pip install python-openstackclient
          openstack image delete ${TF_VAR_image_name}-backup || /bin/true
          openstack image set --name ${TF_VAR_image_name}-backup ${TF_VAR_image_name}-latest || /bin/true
          openstack image set --name ${TF_VAR_image_name}-latest ${TF_VAR_image_name}
        env:
          OS_CLOUD: openstack
      - name: Destroy the test VM
        run: |
          cd terraform
          terraform state rm openstack_images_image_v2.alpine
          terraform destroy -auto-approve
        env:
          OS_CLOUD: openstack
